<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta content="text/html; charset=utf-8" http-equiv="content-type">
    <title>Introduction au logiciel Matlab</title>
    <meta content="A. Oumnad" name="author">
    <meta content="Tutoriel Matlab - Matrices" name="description">
    <meta content="Matlab, matlab GUI, concaténation, transposition, sum, diag, fliplr, flipud, ones, zeros, length, size, min, max, fix,"

      name="keywords">
    <link rel="shortcut icon" type="image/png" href="images/matlab2.png" \="">
    <link href="messtylescss.css" rel="stylesheet" type="text/css">
  </head>
  <body style="   background-color: silver; width: 99%; height: 100%;">
    <div id="gnrl_ttl"> <img id="icone" src="images/matlab.jpg">
      <h3>Didacticiel MATLAB</h3>
    </div>
    <object id="counter" data="compteur.php?name=types_count.txt"></object>
    <div id="sctn_ttl">
      <h1>Les types de données</h1>
    </div>
    <object id="navigation" data="matlab_sommaire.html"></object>
    <div id="contenu">Sous Matlab, les éléments d'une matrice peuvent être de 5
      types (classes) différents. Le typage est automatique dans le sens où il
      n'est pas nécessaire de déclarer les variables avant de les utiliser. Au
      moment de la création d'une variable, Matlab lui affecte un type par
      défaut en fonction de la valeur qu'on lui a affecté.<br>
      <br>
      <div style="text-align: center;"><img alt="" src="images/Matlab_types.png"><br>
      </div>
      <br>
      <h1 class="titre"> <a id="logicalx" name="logicalx"></a>Le type logical</h1>
      Une variable logique peut prendre deux valeur <em>true </em>(1) ou <em>false
        </em>0. Elle est codée sur un octet. En fait, tout ce qui est différent
      de 0 est considéré comme <em>true</em>.<br>
      <br>
      <span class="matcmd">&gt;&gt; a = true</span><br>
      &nbsp; a = 1<br>
      <br>
      <span class="matcmd">&gt;&gt; b = false</span><br>
      &nbsp; b =&nbsp; 0<br>
      <br>
      <span class="matcmd">&gt;&gt; c = 4 &gt; 1</span><br>
      &nbsp; c =&nbsp; 1<br>
      <br>
      <span class="matcmd">&gt;&gt; d = [20 9 8 30 40 5] &gt; 10</span><br>
      &nbsp; d =&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp; 0&nbsp;&nbsp;&nbsp;&nbsp;
      0&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;
      1&nbsp;&nbsp;&nbsp;&nbsp; 0<br>
      <br>
      <span class="matcmd">&gt;&gt; whos</span><br>
      &nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Bytes&nbsp; Class&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Attributes<br>
      &nbsp; a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1&nbsp;
      logical&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <br>&nbsp; b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1&nbsp;
      logical&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <br>&nbsp; c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1&nbsp;
      logical&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <br>&nbsp; d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1x6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      6&nbsp; logical <br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
      <h1><a class="titre" id="typecharxx"> Le type char </a></h1>
      Chaque caractère est codé par son code Unicode sur 2 octets<br>
      <span>&gt;&gt; c = 'A';<br>
        &gt;&gt; s = 'ABCD'<br>
        &gt;&gt; whos<br>
      </span>&nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Bytes&nbsp; Class&nbsp;&nbsp;&nbsp; Attributes<br>
      &nbsp; c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      2&nbsp;
      char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <br>&nbsp; s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      1x4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      8&nbsp; char&nbsp; <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
      <br>
      <br>
      <h1 class="titre"><a id="typenum"> </a>Les types Numériques</h1>
      <h1 class="titre"> </h1>
      <div style="margin-left: 20px;">Par défaut, Matlab stocke toutes les
        variables numériques sous format réel double précision (8 octet). On
        peut les convertir dans un autre format à l'aide des fonctions: int8(),
        unit8(), int16(), unit16(), int32(), unit32(), int64(), unit64(),<br>
        <br>
        <span class="matcmd">&gt;&gt; a = 125;</span><br>
        <span class="matcmd">&gt;&gt; b = int8(125);</span><br>
        <span class="matcmd">&gt;&gt; c = uint8(125);</span><br>
        <span class="matcmd">&gt;&gt; d = int16(125);</span><br>
        <span class="matcmd">&gt;&gt; e = uint16(125);</span><br>
        <span class="matcmd">&gt;&gt; whos;</span><br>
        &nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        Bytes&nbsp; Class&nbsp;&nbsp;&nbsp;&nbsp; Attributes<br>
        &nbsp; a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        8&nbsp;
        double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <br>&nbsp; b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        1&nbsp;
        int8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <br>&nbsp; c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        1&nbsp;
        uint8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <br>&nbsp; d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        2&nbsp;
        int16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <br>&nbsp; e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        2&nbsp; uint16<br>
        <br>
        Voir <a target="_top" href="#convnum">conversion de types</a> pour plus
        de détail sur cet aspect &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
      <br>
      <h1 class="titre"> <a id="typecell" name="typecell"></a>le type cellule</h1>
      <div style="margin-left: 40px;">Une cellule est un conteneur qui peut
        recevoir n'importe quel type de donnée. Généralement, une chaîne de
        longueur quelconque ou un matrice de nombres. <br>
        Un tableau de cellule (Cell Array) est une pseudo-matrice dont les
        éléments (cellules) peuvent être de types différents, et de tailles
        différentes<br>
        <br>
        <span class="matcmd">&gt;&gt; ca = {20 30 40; 'aa' 'Bonjour' 150; [ 1 2
          3] 'ABCD' 1:5; magic(2) magic(3) magic(4)}</span><br>
        ca = <br>
        &nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        20]&nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        30]&nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 40]<br>
        &nbsp;&nbsp;&nbsp;
        'aa'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        'Bonjour'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 150]<br>
        &nbsp;&nbsp;&nbsp; [1x3 double]&nbsp;&nbsp;&nbsp;
        'ABCD'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [1x5
        double]<br>
        &nbsp;&nbsp;&nbsp; [2x2 double]&nbsp;&nbsp;&nbsp; [3x3
        double]&nbsp;&nbsp;&nbsp; [4x4 double]<br>
        <br>
        <span class="matcmd"> &gt;&gt; ca(2,2)</span><br>
        ans = 'Bonjour'<br>
        <br>
        <span class="matcmd"> &gt;&gt; ca(3,2)</span><br>
        ans = 'ABCD'<br>
        <br>
        <span class="matcmd"> &gt;&gt; ca(4,2)</span><br>
        ans = [3x3 double]<br>
        <br>
        <span class="matcmd"> &gt;&gt; cell2mat( ca(4,2))</span><br>
        ans =<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp;
        1&nbsp;&nbsp;&nbsp;&nbsp; 6<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;
        5&nbsp;&nbsp;&nbsp;&nbsp; 7<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp;
        9&nbsp;&nbsp;&nbsp;&nbsp; 2<br>
        <br>
        <br>
      </div>
      <h2 class="titre"> <span class="tt2"><a id="convnum" name="convtype"></a></span>Conversion
        entre types numériques</h2>
      <br>
      <table style="width: 100%;" border="1" cellpadding="5">
        <tbody>
          <tr>
            <td>int8(n)</td>
            <td>Convertir n de son type d'origine vers le type <em><strong>entier
                  8 bits signé</strong></em>. Ce type ne peut représenter que
              les nombres compris entre -128 et +127. Si la valeur de n est hors
              cet intervalle, elle sera tronquée à +127 ou à -128<br>
              <span class="matcmd">&gt;&gt; a = int8(50)</span><br>
              &nbsp;&nbsp; a =&nbsp;&nbsp; 50<br>
              <br>
              <span class="matcmd">&gt;&gt; b = int8(200)</span><br>
              &nbsp;&nbsp; b = 127<br>
              <br>
              <span class="matcmd">&gt;&gt; c = int8(-150)</span><br>
              &nbsp;&nbsp; c =&nbsp; -128<br>
              <br>
              <br>
              <span class="matcmd">&gt;&gt; d = uint16(2300)</span><br>
              &nbsp;&nbsp; d =&nbsp; 2300<br>
              <br>
              <span class="matcmd">&gt;&gt; e = int8(d)</span><br>
              &nbsp;&nbsp; e = &nbsp; 127<br>
              <br>
              <span class="matcmd">&gt;&gt; whos</span><br>
              &nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              Bytes&nbsp; Class&nbsp;&nbsp;&nbsp;&nbsp; Attributes<br>
              &nbsp; a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1&nbsp;
              int8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <br>&nbsp; b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1&nbsp;
              int8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <br>&nbsp; c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1&nbsp;
              int8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <br>&nbsp; d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              2&nbsp;
              uint16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <br>&nbsp; e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1&nbsp;
              int8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              </td>
          </tr>
          <tr>
            <td><em><strong>uint8(n)</strong></em></td>
            <td>Convertir n de son type d'origine vers le type entier 8 bits non
              signé. Ce type ne peut représenter que les nombres compris entre 0
              et 255. Si la valeur de n est hors cet intervalle, elle sera
              tronquée à 0 ou à 255<br>
              <span class="matcmd">&gt;&gt; a = uint8(50)</span><br>
              &nbsp;&nbsp; a =&nbsp;&nbsp; 50<br>
              <br>
              <span class="matcmd">&gt;&gt; b = uint8(300)</span><br>
              &nbsp;&nbsp; b = 255<br>
              <br>
              <span class="matcmd">&gt;&gt; c = uint8(-150)</span><br>
              &nbsp;&nbsp; c =&nbsp; 0</td>
          </tr>
          <tr>
            <td><em><strong>int16(n)</strong></em><br>
            </td>
            <td>Convertit n en un&nbsp;<em><strong>entier 16 bits signé</strong></em>.
              Le résultat est compris dans l'intervalle [-32768,&nbsp; -32768]<br>
            </td>
          </tr>
          <tr>
            <td><em><strong>uint16(n)</strong></em> </td>
            <td>Convertit n en un&nbsp;<em><strong>entier 16 bits non signé</strong></em>.
              Le résultat est compris dans l'intervalle [0,&nbsp; 65535] </td>
          </tr>
          <tr>
            <td><em><strong>int32(n)</strong></em> </td>
            <td>Convertit n en un&nbsp;<em><strong>entier 32 bits signé</strong></em>.
              Le résultat est compris dans l'intervalle [-2147483648,&nbsp;
              2147483647] </td>
          </tr>
          <tr>
            <td><em><strong>uint32(n)</strong></em> </td>
            <td>Convertit n en un&nbsp;<em><strong>entier 32 bits non signé</strong></em>.
              Le résultat est compris dans l'intervalle [0,&nbsp; 4294967295] </td>
          </tr>
          <tr>
            <td style="width: 144px;"><em><strong>int64(n)</strong></em> </td>
            <td style="width: 310px;">Convertit n en un&nbsp;<em><strong>entier
                  64 bits signé</strong></em>. Le résultat est compris dans
              l'intervalle [-9223372036854775808, 9223372036854775807] </td>
          </tr>
          <tr>
            <td><em><strong>uint64(n)</strong></em> </td>
            <td>Convertit n en un&nbsp;<em><strong>entier 64 bits non signé</strong></em>.
              Le résultat est compris dans l'intervalle [0,
              18446744073709551615]<br>
            </td>
          </tr>
          <tr>
            <td><em><strong>single(n)</strong></em><br>
            </td>
            <td>Convertit n en un <em><strong>réel simple précision (32 bits)</strong></em>.
              Le résultat est compris dans l'intervalle [-3.4028e+038, +&nbsp;
              3.4028e+038]<br>
              tous les nombres compris dans l'intervalle ]-1.1755e-038,
              1.1755e-038[ sont représentés par 0<br>
            </td>
          </tr>
          <tr>
            <td><em><strong>double(n)</strong></em> </td>
            <td>Convertit n en un <em><strong>réel double précision (64 bits)</strong></em>.
              Le résultat est compris dans l'intervalle [-1.7977e+308, &nbsp;
              1.7977e+308]<br>
              double est le type par défaut.<br>
            </td>
          </tr>
          <tr>
            <td><em><strong>cast(n,type)</strong></em><br>
            </td>
            <td>Convertit n vers le type précisé. Cette fonction permet de
              remplacer n'importe laquelle des fonction ci-dessus.<br>
              <em><strong>cast(n, 'int8') ≡ int8(n)<br>
                  cast(n, 'uint16') ≡ int16(n)<br>
                </strong></em></td>
          </tr>
          <tr>
            <td><em><strong>typecast(n,type)</strong></em><br>
            </td>
            <td>Convertit n vers le type précisé sans modifier la valeur de la
              donnée. Si n est plus grand que le nombre max que l'on peut
              représenter avec le type désiré, il sera tronçonner en plusieurs
              morceaux.<br>
              <span style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 153); display: inline !important; float: none;"><br>
                prenons l'exemple du nombre 888666444, si on le représente en
                binaire, on voit qu'il fait 30 bits. Il faut donc au moins&nbsp;
                quatre octets pour le représenter.</span><br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <span class="matcmd" style="font-family: Consolas, monaco, monospace; font-weight: bold; font-style: italic; color: rgb(0, 0, 153); font-size: medium; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">dec2bin(888666444)</span><br

                style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <span style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 153); display: inline !important; float: none;">ans
                = 110100111101111111100101001100</span><br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <br>
              On commence par affecter notre valeur à une variable N de type <em>uint32</em>,
              ce qui ne pose aucun problème<br>
              <span class="matcmd">&gt;&gt; N = uint32(888666444)</span><br>
              N =&nbsp; 888666444<br>
              <br>
              On essaye ensuite d'affecter le contenu de cette variable à une
              variable M de type uint8<br>
              &gt;&gt; M = typecast(N,'uint8')<br>
              <br>
              M =&nbsp;&nbsp; 76&nbsp; 249&nbsp; 247&nbsp;&nbsp; 52<br>
              <br>
              On obtient une matrice (vecteur) de quatre nombre de type uint8.
              C'est normal, notre valeur d'origine est constituée de quatre
              octet<br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <span style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 153); display: inline !important; float: none;">&nbsp;
                &nbsp; &nbsp; &nbsp; &nbsp; 888666444 =&nbsp; 110100 11110111
                11111001 01001100</span><br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <span style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 153); display: inline !important; float: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                247&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                249&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                76</span> <br>
              <br>
              Remarquez que le premier élément du vecteur M est l'octet de plus
              faible poids de N. C'est la représentation <em><strong>LittleEndian</strong></em>.
              Pour les inverser, on a deux solution:<br>
              <ul>
                <li>Après la conversion, on 'retourne' le vecteur M<br>
                  <span class="matcmd">&gt;&gt; M = fliplr(M)</span><br>
                  M =&nbsp; 52&nbsp; 247&nbsp; 249&nbsp;&nbsp; 76</li>
                <li>On retourne le nombre N avant la conversion<br>
                  <span class="matcmd">&gt;&gt; M =
                    typecast(swapbytes(N),'uint8')</span><br>
                  M =&nbsp;&nbsp; 52&nbsp; 247&nbsp; 249&nbsp;&nbsp; 76</li>
              </ul>
              <br>
              <em><strong> </strong></em></td>
          </tr>
        </tbody>
      </table>
      <br>
      <br>
      <br>
      <br>
      <h1 class="titre"><a id="convstr" name="convtype"> </a>Conversion entre
        nombres et string</h1>
      <br>
      <table style="width: 100%;" border="1" cellpadding="5">
        <tbody>
          <tr>
            <td style="width: 108.733px;"><em><strong><a target="_top" href="http://www.mathworks.com/help/matlab/ref/char.html">char(N)</a></strong></em></td>
            <td style="width: 742.733px;">Retourne le caractère de code Unicode
              N. N doit être un entier positif&nbsp; compris entre 0 et 65535<br>
              <span class="matcmd">&gt;&gt; s = char(65)</span><br>
              &nbsp; s = A<br>
              <br>
              <span class="matcmd">&gt;&gt; S = char([65 66 67 68])</span><br>
              &nbsp;&nbsp; S = ABCD<br>
              <br>
              <span class="matcmd">&gt;&gt; S = char(65 : 65+25)</span><br>
              &nbsp;&nbsp; S = ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
--------------------------------------------------------------------------<br>
              Si C est un tableau de cellules de chaînes de caractères. Char(C)
              retourne une matrice de caractères, les chaînes sont complétées
              par des espaces pour former une matrice rectangulaire. Utiliser <em>sellstr()</em>
              pour faire l'opération inverse. <br>
              <span class="matcmd">&gt;&gt; C = {'ABCD' 'abcdefg'; 'XYZ'&nbsp;
                '012'}</span><br>
              C = <br>
              &nbsp;&nbsp;&nbsp; 'ABCD'&nbsp;&nbsp;&nbsp; 'abcdefg'<br>
              &nbsp;&nbsp;&nbsp; 'XYZ'&nbsp;&nbsp;&nbsp;&nbsp;
              '012'&nbsp;&nbsp;&nbsp; <br>
              <br>
              <span class="matcmd">&gt;&gt; SS = char(C)</span><br>
              SS = <br>
              ABCD&nbsp;&nbsp; <br>
              XYZ&nbsp;&nbsp;&nbsp; <br>
              abcdefg<br>
              012&nbsp;&nbsp;&nbsp; </td>
          </tr>
          <tr>
            <td>int2str()</td>
            <td>Convertit un entier en une chaîne. C'est souvent très utile avec
              l'interface GUI quand on a des champs d'affichage qui n'accepte
              que des strings<br>
              <span class="matcmd">&gt;&gt; s = ['Figure n° '&nbsp;&nbsp;
                int2str(125)]</span><br>
              &nbsp;&nbsp; s = figure n° 125<br>
            </td>
          </tr>
          <tr>
            <td>mat2str()</td>
            <td>Retourne la chaîne qui a servi à la définition de la matrice.<br>
              <span class="matcmd">&gt;&gt; A = magic(4)</span><br>
              A =<br>
              &nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp;&nbsp;&nbsp;
              2&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp; 13<br>
              &nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp;&nbsp;
              10&nbsp;&nbsp;&nbsp;&nbsp; 8<br>
              &nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp;&nbsp;
              7&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp; 12<br>
              &nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 14&nbsp;&nbsp;&nbsp;
              15&nbsp;&nbsp;&nbsp;&nbsp; 1<br>
              <br>
              <span class="matcmd">&gt;&gt; S = mat2str(A)</span><br>
              &nbsp;&nbsp; S = [16 2 3 13;5 11 10 8;9 7 6 12;4 14 15 1] <br>
            </td>
          </tr>
          <tr>
            <td>num2str()</td>
            <td>Convertit un nombre quelconque en une chaîne. C'est souvent très
              utile quand il faut coller un nombre avec une chaîne. Surtout avec
              l'interface GUI quand on a des champs d'affichage qui n'acceptent
              que des strings<br>
              <span class="matcmd">&gt;&gt; s1 = 'La température du four est
                égale à ';<br>
                &gt;&gt; s2 = 'degré';<br>
                &gt;&gt; n = 850.5;<br>
                &gt;&gt; S = [s1 num2str(n) s2]</span><br>
              &nbsp;&nbsp; S = La température du four est égale à 850.5 degrés<br>
            </td>
          </tr>
          <tr>
            <td>str2double()</td>
            <td>Convertit une chaîne en un nombre de type double. Ceci est très
              utile, par exemple, quand on vient de récupérer le contenu d'un
              champs de saisie comme le contrôle GUI <em>Edit</em>, il est sous
              forme d'une chaîne<br>
              <span class="matcmd">&gt;&gt; R = str2double('23.5e3')</span><br>
              &nbsp;&nbsp; R =&nbsp; 23500<br>
              <br>
              <span class="matcmd">&gt;&gt; str2double('123.45e7')</span><br>
              &nbsp;&nbsp; ans = 1.2345e+009<br>
            </td>
          </tr>
          <tr>
            <td>str2num()</td>
            <td>Convertit une chaîne en un nombre. A de rares exceptions près,
              elle produit les mêmes résultats que str2double(). Par défaut, le
              nombre retoutné est de type double. Si on veut que le résultat
              soit dans un type autre que double, on peut procéder de trois
              façons:<br>
              <span class="matcmd">&gt;&gt; n = str2num('uint16(3500)')<br>
                &nbsp;&nbsp; n = 3500<br>
                &gt;&gt; m = uint16( str2num('3500'))<br>
                &nbsp;&nbsp; m = 3500<br>
                &gt;&gt; k = cast(str2num('3500'), 'uint16')<br>
                &nbsp;&nbsp; k = 3500<br>
                &gt;&gt; whos</span><br>
              &nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              Bytes&nbsp; Class&nbsp;&nbsp;&nbsp;&nbsp; Attributes<br>
              &nbsp; k&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              2&nbsp;
              uint16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <br>&nbsp; m&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              2&nbsp;
              uint16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <br>&nbsp; n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              1x1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              2&nbsp; uint16 <br>
            </td>
          </tr>
          <tr>
            <td>native2unicode()</td>
            <td>Reconstitue une chaîne à partir des codes de ces caractères<br>
              <span class="matcmd">&gt;&gt; N = [65&nbsp; 195&nbsp; 167&nbsp;
                195&nbsp; 169&nbsp;&nbsp; 66]</span><br>
              &nbsp;&nbsp; N = 65&nbsp;&nbsp; <span style="color: red;">195&nbsp;&nbsp;
                167</span>&nbsp;&nbsp; <span style="color: #33cc00;">195&nbsp;&nbsp;
                169</span>&nbsp;&nbsp;&nbsp; 66<br>
              <br>
              <span class="matcmd">&gt;&gt; s = native2unicode(N, 'utf-8')</span><br>
              &nbsp;&nbsp; s = A<span style="color: red;">ç</span><span style="color: #33cc00;">é</span>B<br>
              <br>
              On remarque qu'avec le codage utf-8, les caractères ç et é sont
              codés par deux octet chacun.</td>
          </tr>
          <tr>
            <td>unicode2native()</td>
            <td>Réalise le codage d'une chaîne conformément à codage standard<br>
              <span class="matcmd" style="font-family: Consolas, monaco, monospace; font-weight: bold; font-style: italic; color: rgb(0, 0, 153); font-size: medium; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">B
                = unicode2native('AçéB', 'latin-1')&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span></span><br

                style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <span style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 153); display: inline !important; float: none;">B
                =&nbsp;&nbsp; 65&nbsp; 231&nbsp; 233&nbsp;&nbsp; 66</span><br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <span class="matcmd" style="font-family: Consolas, monaco, monospace; font-weight: bold; font-style: italic; color: rgb(0, 0, 153); font-size: medium; font-variant: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">B
                = unicode2native('AçéB','utf-8')</span><br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <span style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 153); display: inline !important; float: none;">B
                =&nbsp;&nbsp; 65&nbsp; 195&nbsp; 167&nbsp; 195&nbsp;
                169&nbsp;&nbsp; 66</span><br style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">
              <span style="color: rgb(0, 0, 0); font-family: Cambria; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 153); display: inline !important; float: none;">on
                remarque avec le codage utf-8,&nbsp; ç est codé par deux octets
                195, 167 ainsi que é qui est codé par 195, 169</span>&nbsp; </td>
          </tr>
        </tbody>
      </table>
      <br>
      <br>
      <br>
      <h1> <a class="titre" id="convcell">Conversion entre matrices et cellules</a></h1>
      <h1> </h1>
      <table style="width: 100%;" border="1" cellpadding="5">
        <tbody>
          <tr>
            <td style="width: 121.733px;"><em><strong><a target="_top" href="http://www.mathworks.com/help/matlab/ref/cell2mat.html">cell2mat()</a><br>
                </strong></em></td>
            <td style="width: 729.733px;">Convertit une matrice de cellule en
              une matrice de nombres</td>
          </tr>
          <tr>
            <td><em><strong><a target="_top" href="http://www.mathworks.com/help/matlab/ref/cell2struct.html">cell2struct()</a><br>
                </strong></em></td>
            <td>Convertie une matrice de cellule en une structure</td>
          </tr>
          <tr>
            <td><em><strong><a target="_top" href="http://www.mathworks.com/help/matlab/ref/cellstr.html">cellstr()</a><br>
                </strong></em></td>
            <td>Construit une matrice de cellules contenant des chaînes à partir
              d'une matrice de chaînes</td>
          </tr>
          <tr>
            <td><em><strong><a target="_top" href="http://www.mathworks.com/help/matlab/ref/mat2cell.html">mat2cell()</a><br>
                </strong></em></td>
            <td>Convertit une matrice en une matrice de cellule avec
              potentiellement des cellules de taille différentes</td>
          </tr>
          <tr>
            <td><em><strong><a target="_top" href="http://www.mathworks.com/help/matlab/ref/num2cell.html">num2cell()</a><br>
                </strong></em></td>
            <td>Convertit un tableau en une matrice de cellules</td>
          </tr>
          <tr>
            <td><em><strong><a target="_top" href="http://www.mathworks.com/help/matlab/ref/struct2cell.html">struct2cell()</a><br>
                </strong></em></td>
            <td>Convertit une structure en une matrice de cellules</td>
          </tr>
        </tbody>
      </table>
      <br>
      <br>
      <h1> <a class="titre" id="identiftype">Identifier le type d'une donnée</a></h1>
      Voici une liste non exhaustive de fonctions qui permettent de renseigner
      sur les types des données.<br>
      <table style="width: 100%;" border="1" cellpadding="5">
        <tbody>
          <tr>
            <td>class(x)</td>
            <td>Retourne la classe (type) de x</td>
          </tr>
          <tr>
            <td>whos</td>
            <td>Affiche toutes les variables avec leur taille et leur type</td>
          </tr>
          <tr>
            <td style="width: 104.733px;">iscell(x)</td>
            <td style="width: 746.733px;">Vrai si x est une matrice de cellule</td>
          </tr>
          <tr>
            <td>iscellstr(x)</td>
            <td>Vrai si x est une matrice de cellule contenant des chaînes</td>
          </tr>
          <tr>
            <td>ischar(x)</td>
            <td>Vrai si x est de type char</td>
          </tr>
          <tr>
            <td>isfloat(x)</td>
            <td>Vrai si x est de type single ou double</td>
          </tr>
          <tr>
            <td>isinteger(x)</td>
            <td>Vrai si x est un entier</td>
          </tr>
          <tr>
            <td>islogical(x)</td>
            <td>Vrai si x est une variable logique</td>
          </tr>
          <tr>
            <td style="height: 19px;">isnumeric(x)</td>
            <td>Vrai si x est un nombre</td>
          </tr>
          <tr>
            <td>isreal(x)</td>
            <td>Vrai si x est un réel pur sans partie imaginaire</td>
          </tr>
          <tr>
            <td>isscalar(x)</td>
            <td>Vrai si x est un scalaire: valeur unique (matrice&nbsp; 1x1)</td>
          </tr>
          <tr>
            <td>isstr(x)</td>
            <td>Vrai si x est une chaine</td>
          </tr>
          <tr>
            <td>isstruct(x)</td>
            <td>Vrai si x est une structure</td>
          </tr>
          <tr>
            <td>isvector(x)</td>
            <td>Vrai si x est un vecteur; matrice à une seule ligne ou une seule
              colonne.</td>
          </tr>
        </tbody>
      </table>
      <br>
      <br>
      <br>
      <h1><a class="titre" id="constantes"> Quelques constantes et fonctions
          utiles</a></h1>
      <br>
      <table style="width: 100%;" border="1" cellpadding="5">
        <tbody>
          <tr>
            <td style="width: 104.733px;">ans</td>
            <td style="width: 746.733px;">Variable qui reçoit le résultat de la
              dernière opération s'il n'a pas été affecté à une variable
              spécifique.</td>
          </tr>
          <tr>
            <td>eps</td>
            <td>Valeur très faible (2.2204e-016) correspondant à la précision de
              calcul avec les nombres réel&nbsp;</td>
          </tr>
          <tr>
            <td>pi</td>
            <td>3.1415926535897...</td>
          </tr>
          <tr>
            <td>inf</td>
            <td>infini</td>
          </tr>
          <tr>
            <td>NaN</td>
            <td>Not a Number (0/0,&nbsp; inf/inf ...)</td>
          </tr>
          <tr>
            <td>i, j</td>
            <td>unité imaginaire pour les nombre complexes</td>
          </tr>
          <tr>
            <td>intmax</td>
            <td>Le plus grand entier d'un type entier donné.<br>
              <span class="matcmd">&gt;&gt; intmax('uint8')</span><br>
              &nbsp; ans =&nbsp; 255<br>
              <span class="matcmd">&gt;&gt; intmax('int32')</span><br>
              &nbsp;&nbsp; ans = 2147483647</td>
          </tr>
          <tr>
            <td>intmin</td>
            <td>Le plus petit entier d'un type entier donné.<br>
              <span class="matcmd">&gt;&gt; intmin('int32')</span><br>
              &nbsp;&nbsp; ans = -2147483648<br>
              <span class="matcmd">&gt;&gt; intmin('uint32')</span><br>
              &nbsp;&nbsp; ans = 0</td>
          </tr>
          <tr>
            <td>realmax</td>
            <td>Le plus grand réel d'un type float donné.<br>
              <span class="matcmd">&gt;&gt; realmax('single')</span><br>
              &nbsp;&nbsp; ans = 3.4028e+038<br>
              <span class="matcmd">&gt;&gt; realmax('double')</span><br>
              ans =&nbsp; 1.7977e+308</td>
          </tr>
          <tr>
            <td>realmin</td>
            <td>Le plus petit réel d'un type float donné.<br>
              <span class="matcmd">&gt;&gt; realmin('single')</span><br>
              &nbsp;&nbsp; ans = 1.1755e-038<br>
              <span class="matcmd">&gt;&gt; realmin('double')</span><br>
              &nbsp;&nbsp; ans = 2.2251e-308</td>
          </tr>
          <tr>
            <td><br>
            </td>
            <td><br>
            </td>
          </tr>
          <tr>
            <td><br>
            </td>
            <td><br>
            </td>
          </tr>
        </tbody>
      </table>
      <br>
      <br>
    </div>
    <script language="JavaScript">
         document.getElementById('navigation').height= document.getElementById('contenu').scrollHeight;
    </script>
  </body>
</html>
